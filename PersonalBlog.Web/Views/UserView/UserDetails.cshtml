@using System.Security.Claims

@{
    ViewData["Title"] = "Пользователь";
    Layout = "_Layout";
}

@if (User.Identity.IsAuthenticated)
{
    <p>Nickname: <span id="userNickname"></span></p>
    <p>Login: <span id="userLogin"></span></p>
    <p>Роли: <span id="userRoles"></span></p>
    
    <a class="btn btn-primary" href="/UserView/UserEdit?userId=@User.FindFirstValue(ClaimTypes.NameIdentifier)">Редактировать</a>
}

<script>
    function getQueryParam(param) {
        return new URLSearchParams(window.location.search).get(param);
    }

    const userId = getQueryParam("userId");
    
    if (userId) {
        async function loadUser() {
            try {
                const res = await fetch("/userapi/" + userId); 
                if (!res.ok) throw new Error("Ошибка загрузки данных пользователя");

                const u = await res.json();

                document.getElementById("userNickname").innerText = u.nickname || "";
                document.getElementById("userLogin").innerText = u.login || "";
                const role = (u.roles && u.roles.length > 0) ? u.roles[0] : "Нет роли";
                document.getElementById("userRoles").innerHTML = `<span class="badge badge-info">${role}</span>`;
            } catch (err) {
                console.error(err);
                alert("Не удалось загрузить данные пользователя");
            }
        }

        loadUser();
    }
</script>