@{
    ViewData["Title"] = "Редактировать пользователя";
    Layout = "_Layout";
}

<h2>Редактировать пользователя</h2>

@if (User.IsInRole("Admin")) { 
    <label for="roleSelect">Роль:</label>
    <select id="roleSelect" class="form-control mb-2"></select>
} 

<label for="nickname">Имя:</label>
<input type="text" id="nickname" placeholder="Имя" class="form-control mb-2" />
<label for="login">Email:</label>
<input type="text" id="login" placeholder="Email" class="form-control mb-2" />
<label for="password">Пароль:</label>
<input type="password" id="password" placeholder="Пароль" class="form-control mb-2" />

<button class="btn btn-primary" onclick="saveUser()">Сохранить</button>

<script>
function getQueryParam(param) {
    return new URLSearchParams(window.location.search).get(param);
}

const userId = getQueryParam("userId");

async function saveUser() {
    if (!userId) return alert("Не указан userId");

    const nickname = document.getElementById("nickname").value.trim();
    const login = document.getElementById("login").value.trim();
    const password = document.getElementById("password").value.trim();
    const roleSelect = document.getElementById("roleSelect");
    const roleId = roleSelect ? roleSelect.value : null;

    let errors = [];
    if (!nickname) errors.push("Введите имя пользователя");
    if (!login) errors.push("Введите email");
    if (password && password.length < 6) errors.push("Пароль должен быть не короче 6 символов");
    if (roleSelect && !roleId) errors.push("Выберите роль");

    if (errors.length > 0) {
        alert("Исправьте ошибки:\n- " + errors.join("\n- "));
        return;
    }

    const dto = { login, nickname, password: password || null, roleId: roleId || null };

    try {
        const res = await fetch("/userapi/" + userId, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(dto)
        });
        if (!res.ok) {
            const errData = await res.json();
            throw new Error(errData?.message || "Ошибка при сохранении пользователя");
        }

        alert("Пользователь обновлен");
        window.location.href = "/UserView/UserDetails?userId=" + userId;
    } catch (err) {
        console.error(err);
        alert("Не удалось сохранить пользователя: " + err.message);
    }
}

async function loadRoles() {
    const select = document.getElementById("roleSelect");
    if (!select) return;
    try {
        const res = await fetch("/roleapi/all");
        if (!res.ok) throw new Error("Ошибка загрузки ролей");
        const roles = await res.json();
        roles.forEach(r => {
            const opt = document.createElement("option");
            opt.value = r.id;
            opt.text = r.roleName;
            select.add(opt);
        });
    } catch (err) {
        console.error(err);
        alert("Не удалось загрузить роли");
    }
}

async function loadUser() {
    if (!userId) return;
    try {
        const res = await fetch("/userapi/" + userId);
        if (!res.ok) throw new Error("Ошибка загрузки данных пользователя");
        const u = await res.json();

        document.getElementById("nickname").value = u.nickname || "";
        document.getElementById("login").value = u.login || "";

        const roleSelect = document.getElementById("roleSelect");
        if (roleSelect && u.roleId) roleSelect.value = u.roleId;
    } catch (err) {
        console.error(err);
        alert("Не удалось загрузить данные пользователя");
    }
}

loadRoles().then(loadUser);
</script>